{
    "contents" : "# resemble: Regression and similarity evaluation for memory-based learning of spectral data\n\nVisit the [`resemble` site here](http://l-ramirez-lopez.github.io/resemble/)\n\nYou can install the `resemble` package directly from github using [`devtools`](http://cran.r-project.org/web/packages/devtools/index.html) (with a proper installed version of [Rtools](http://cran.r-project.org/bin/windows/Rtools/)):\n\n```\nrequire(\"devtools\")\ninstall_github(\"resemble\",\"l-ramirez-lopez\")\n```\n\nYou can also download the [binary (.zip) file from here](https://github.com/l-ramirez-lopez/resemble/blob/master/Installers/resemble_1.0.zip?raw=true) or the [source file (.tar.gz) from here](https://github.com/l-ramirez-lopez/resemble/blob/master/Installers/resemble_1.0.tar.gz?raw=true). Remeber you should have R>3.0.0. Supose you downloaded the binary file to 'C:/MyFolder/', then you should be able to install the package as follows:\n\nFirst, if you do not have the following packages installed, you shoudl install them first\n```\ninstall.packages('Rcpp')\ninstall.packages('RcppArmadillo')\ninstall.packages('pls')\ninstall.packages('foreach')\ninstall.packages('iterators')\ninstall.packages('kernlab')\n```\nThen, install `resemble`\n\n```\ninstall.packages('C:/MyFolder/resemble_1.0.zip')\n````\nor\n\n```\ninstall.packages('C:/MyFolder/resemble_1.0.tar.gz', type = 'source')\n```\n\nAfter installing `resemble` you should be also able to run the following lines:\n\n```\nrequire(resemble)\n\nhelp(mbl)\n\n#install.packages('prospectr')\nrequire(prospectr)\n\ndata(NIRsoil)\n\nXu <- NIRsoil$spc[!as.logical(NIRsoil$train),]\nYu <- NIRsoil$CEC[!as.logical(NIRsoil$train)]\nYr <- NIRsoil$CEC[as.logical(NIRsoil$train)]\nXr <- NIRsoil$spc[as.logical(NIRsoil$train),]\n\nXu <- Xu[!is.na(Yu),]\nXr <- Xr[!is.na(Yr),]\n\nYu <- Yu[!is.na(Yu)]\nYr <- Yr[!is.na(Yr)]\n\n# Example of the mbl function\n# A mbl approach (the spectrum-based learner) as implemented in Ramirez-Lopez et al. (2013)\n# An exmaple where Yu is supposed to be unknown, but the Xu (spectral variables) are known\nctrl1 <- mblController(sm = 'pc', pcSelection = list('opc', 40),\n                       valMethod = 'NNv',\n                       scaled = TRUE, center = TRUE)\n\nsbl.u <- mbl(Yr = Yr, Xr = Xr, Yu = NULL, Xu = Xu,\n             mblCtrl = ctrl1,\n             distUsage = 'predictors',\n             k = seq(40, 150, by = 10),\n             method = 'gpr')\n\ngetPredictions(sbl.u)\n````\n\n[`resemble`](http://l-ramirez-lopez.github.io/resemble/) implements a function dedicated to non-linear modelling of complex visible and infrared spectral data based on memory-based learning (MBL, _a.k.a_ instance-based learning or local modelling in the chemometrics literature). The package also includes functions for: computing and evaluate spectral similarity/dissimilarity matrices; projecting the spectra onto low dimensional orthogonal variables; removing irrelevant spectra from a reference set; etc. \n\n\nThe functions for computing and evaluate spectral similarity/dissimilarity matrices can be summarized as follows:\n\n| Function                 | Description/computes...                                                                                  |\n| -----------------------  | -------------------------------------------------------------------------------------------------------  |\n| `fDiss`                  | Euclidean and Mahalanobis distances as well as the cosine dissimilarity (_a.k.a_ spectral angle mapper)  |            \n| `corDiss`                | correlation and moving window correlation dissimilarity                                                  |\n| `sid`                    | spectral information divergence between spectra or between the probability distributions of spectra      |\n| `orthoDiss`              | principal components and partial least squares dissimilarity (including several options)                 | \n| `simEval`                | evaluates a given similarity/dissimilarity matrix based on the concept of side information               |  \n\nThe functions for projecting the spectra onto low dimensional orthogonal variables are:\n\n| Function                 | Description                                                                                                  |\n| -----------------------  | ------------------------------------------------------------------------------------------------------------ |\n| `pcProjection`           | projects the spectra onto a principal component space                                                        |                      \n| `plsProjection`          | projects the spectra onto a partial least squares component space  (_a.k.a_ projection to latent structures) |                                      \n| `orthoProjection`        | reproduces either the `pcProjection` or the `plsProjection` functions                                        |  \n\nThe projection functions also offer different options for optimizing/selecting the number of components involved in the projection.\n\nThe functions modelling the spectra using memory-based learning are:\n\n| Function                 | Description                                              |\n| -----------------------  | -------------------------------------------------------  |\n| `mblControl`             | controls some modelling aspects of the `mbl` function    |                     \n| `mbl`                    | models the spectra by memory-based learning              |                                      \n\nSome additional miscellaneous functions are:\n\n| Function                 | Description                                                            |\n| -----------------------  | ---------------------------------------------------------------------  |\n| `print.mbl`              | prints a summary of the results obtained by the `mbl` function         |                     \n| `plot.mbl`               | plots a summary of the results obtained by the `mbl` function          |       \n| `print.localOrthoDiss`   | prints local distance matrices generated with the `orthoDiss` function |\n\nIn order to expand a little bit more the explanation on the `mbl` function, let's define first the basic input datasets:\n\n* __Reference (training) set__: Dataset with *n* reference samples (e.g. spectral library) to be used in the calibration of a spectral models. Xr represents the matrix of samples (containing the spectral predictor variables) and Yr represents a given response variable corresponding to Xr.\n\n* __Prediction set__ : Data set with _m_ samples where the response variable (Yu) is unknown. However it can be predicted by applying a spectral model (calibrated by using Xr and Yr) on the spectra of these samples (Xu). \n\nIn order to predict each value in Yu, the `mbl` function takes each sample in Xu and searches in Xr for its _k_-nearest neighbours (most spectrally similar samples). Then a (local) model is calibrated with these (reference) neighbours and it immediately predicts the correspondent value in Yu from Xu. In the function, the _k_-nearest neighbour search is performed by computing spectral similarity/dissimilarity matrices between samples. The `mbl` function offers the following regression options for calibrating the (local) models:\n                          \n| Regression methods in the `mbl` function | Description                                                                             \n| ---------------------------------------  | ----------------------------------------- | \n| `'gpr'`                                  | Gaussian process with linear kernel       | \n| `'pls'`                                  | Partial least squares                     | \n| `'wapls1'`                               | Weighted average partial least squares 1  | \n| `'wapls2'`                               | Weighted average partial least squares 2  | \n\n## Keywords\n* _Infrared spectroscopy_\n* _Chemometrics_\n* _Local modelling_\n* _Spectral library_\n* _Lazy learning_\n* _Soil spectroscopy_\n\n## Bug report and development version\n\nYou can send an email to the package maintainer (<leonardo.ramirez@usys.ethz.ch>; <leonardo.ramirez@wsl.ch>) or create an [issue](https://github.com/l-ramirez-lopez/resemble/issues) on github. \n",
    "created" : 1394494513720.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1447301416",
    "id" : "EF2110D",
    "lastKnownWriteTime" : 1394494554,
    "path" : "C:/Users/Ramirez/Dropbox/SPECcourse/FinishedFunctions/resemble/resemble/README.md",
    "project_path" : "README.md",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "markdown"
}